import disnake
from disnake.ext import commands
import random
import asyncio
import math
import aiohttp
import sqlite3

conn = sqlite3.connect("users.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    gender TEXT NOT NULL)""")
conn.commit()

intents = disnake.Intents.all()
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

TOKEN = 'MTA5MTk3NjI2NjkwNDc2ODYxMg.Gire-N.I03cEpNrlNNcAWzjqOVhhEjelN4sCZffJiov7A'


@bot.event
async def on_ready():
    print(f"{bot.user.name} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")


@bot.slash_command()
async def —Å–ø–∏—Å–æ–∫_–∫–æ–º–∞–Ω–¥(ctx):
    f = list(map(lambda x: x.strip(), open('function_list.txt', encoding='utf-8').readlines()))
    embed = disnake.Embed(title='—Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:', description="\n".join(f), color=disnake.Color.blue())
    msg = await ctx.send(embed=embed)
    await ctx.channel.fetch_message(msg.id)\



@bot.slash_command()
async def —á–∏—Ç_–∫–æ–¥(ctx, –∫–æ–¥: str, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
    code = '021206'
    if code == –∫–æ–¥:
        await —É—á–∞—Å—Ç–Ω–∏–∫.add_roles('–∞–¥–º–∏–Ω')



# –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.slash_command()
async def echo(ctx, *, —Å–æ–æ–±—â–µ–Ω–∏–µ=None):
    if —Å–æ–æ–±—â–µ–Ω–∏–µ is None:
        await ctx.send("–ø—É—Å—Ç–æ–æ–æ–æ–æ–æ...")
    else:
        await ctx.send(—Å–æ–æ–±—â–µ–Ω–∏–µ)


# –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –Ω–∏–∫, ID, —Ä–æ–ª–∏ –∏ –¥–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
@bot.slash_command()
async def user_info(ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
    if not —É—á–∞—Å—Ç–Ω–∏–∫:
        —É—á–∞—Å—Ç–Ω–∏–∫ = ctx.author

    roles = []
    for role in —É—á–∞—Å—Ç–Ω–∏–∫.roles:
        if role != ctx.guild.default_role:
            roles.append(role.name)
    if roles:
        roles_str = ", ".join(roles)
    else:
        roles_str = "No roles"

    embed = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {—É—á–∞—Å—Ç–Ω–∏–∫.name}", color=—É—á–∞—Å—Ç–Ω–∏–∫.color)
    embed.add_field(name="–û—Å–Ω–æ–≤–Ω–æ–π –Ω–∏–∫", value=—É—á–∞—Å—Ç–Ω–∏–∫.name, inline=True)
    embed.add_field(name="ID", value=—É—á–∞—Å—Ç–Ω–∏–∫.id, inline=True)
    embed.add_field(name="–ù–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", value=—É—á–∞—Å—Ç–Ω–∏–∫.nick, inline=True)
    embed.add_field(name="–†–æ–ª–∏", value=roles_str, inline=True)
    embed.add_field(name="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", value=—É—á–∞—Å—Ç–Ω–∏–∫.joined_at.strftime("%d-%m-%Y"), inline=True)
    embed.set_thumbnail(url=—É—á–∞—Å—Ç–Ω–∏–∫.avatar.url)

    await ctx.send(embed=embed)


# –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ –º–µ–∂–¥—É –æ—Ä–ª–æ–º –∏ —Ä–µ—à–∫–æ–π
@bot.slash_command()
async def coin_flip(ctx):
    coin_sides = ['–†–µ—à–∫–∞', '–û—Ä—ë–ª']
    win = random.choice(coin_sides)
    if win == '–û—Ä—ë–ª':
        await ctx.send(f"–í—ã–ø–∞–ª {win}!")
    else:
        await ctx.send(f"–í—ã–ø–∞–ª–∞ {win}!")


# –ë—Ä–æ—Å–∞–µ—Ç –∫–æ—Å—Ç—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–Ω–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
@bot.slash_command()
async def dice(ctx, sides: int = 6):
    if sides < 2:
        await ctx.send("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 –≥—Ä–∞–Ω–∏.")
    else:
        result = random.randint(1, sides)
        await ctx.send(f"–í—ã–ø–∞–ª–æ {result}")


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.slash_command()
async def avatar(ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member = None):
    if not —É—á–∞—Å—Ç–Ω–∏–∫:
        —É—á–∞—Å—Ç–Ω–∏–∫ = ctx.author

    embed = disnake.Embed(title=f"–ê–≤–∞—Ç–∞—Ä {—É—á–∞—Å—Ç–Ω–∏–∫.name}", color=disnake.Color.blue())
    embed.set_image(url=—É—á–∞—Å—Ç–Ω–∏–∫.avatar.url)

    await ctx.send(embed=embed)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ: ID, –≤–ª–∞–¥–µ–ª–µ—Ü, —Ä–µ–≥–∏–æ–Ω, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
@bot.slash_command()
async def server_info(ctx):
    guild = ctx.guild

    embed = disnake.Embed(title=f"{guild.name} Server Information", color=disnake.Color.blue())
    embed.add_field(name="ID", value=guild.id, inline=True)
    embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=guild.owner, inline=True)
    embed.add_field(name="–†–µ–≥–∏–æ–Ω", value=guild.region, inline=True)
    embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", value=guild.created_at.strftime("%d-%m-%Y"), inline=True)
    embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=guild.member_count, inline=True)
    embed.add_field(name="–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã", value=len(guild.text_channels), inline=True)
    embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã", value=len(guild.voice_channels), inline=True)
    embed.add_field(name="–†–æ–ª–∏", value=len(guild.roles), inline=True)
    embed.set_thumbnail(url=guild.icon.url)

    await ctx.send(embed=embed)


# –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
@bot.slash_command()
async def clear_messages(ctx, amount: int = 5):
    if ctx.author.guild_permissions.manage_messages:
        await ctx.channel.purge(limit=amount + 1)
        await ctx.send(f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π!", delete_after=5)
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –ö–∏–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
@bot.slash_command()
async def kick(ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member, *, –ø—Ä–∏—á–∏–Ω–∞=None):
    if ctx.author.guild_permissions.kick_members:
        await —É—á–∞—Å—Ç–Ω–∏–∫.kick(reason=–ø—Ä–∏—á–∏–Ω–∞)
        await ctx.send(f"{—É—á–∞—Å—Ç–Ω–∏–∫.name} –±—ã–ª –≤—ã–≥–Ω–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {–ø—Ä–∏—á–∏–Ω–∞}.")

    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –ë–∞–Ω–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
@bot.slash_command()
async def ban(ctx, —É—á–∞—Å—Ç–Ω–∏–∫: disnake.Member, *, –ø—Ä–∏—á–∏–Ω–∞=None):
    if ctx.author.guild_permissions.ban_members:
        await —É—á–∞—Å—Ç–Ω–∏–∫.ban(reason=–ø—Ä–∏—á–∏–Ω–∞)
        await ctx.send(f"{—É—á–∞—Å—Ç–Ω–∏–∫.name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {–ø—Ä–∏—á–∏–Ω–∞}.")
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
@bot.slash_command()
async def unban(ctx, *, —É—á–∞—Å—Ç–Ω–∏–∫):
    if ctx.author.guild_permissions.ban_members:
        banned_users = await ctx.guild.bans()
        member_name, member_discriminator = —É—á–∞—Å—Ç–Ω–∏–∫.split("#")

        for ban_entry in banned_users:
            user = ban_entry.user

            if (user.name, user.discriminator) == (member_name, member_discriminator):
                await ctx.guild.unban(user)
                await ctx.send(f"{user.name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                return

        await ctx.send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
@bot.command()
async def poll(ctx, –≤–æ–ø—Ä–æ—Å, *–≤–∞—Ä–∏–∞–Ω—Ç—ã):
    if len(–≤–∞—Ä–∏–∞–Ω—Ç—ã) > 10:
        await ctx.send("–ù–µ –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    emoji_list = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    option_list = [f"{emoji_list[i]} {option}" for i, option in enumerate(–≤–∞—Ä–∏–∞–Ω—Ç—ã)]

    embed = disnake.Embed(title=–≤–æ–ø—Ä–æ—Å, description="\n".join(option_list), color=disnake.Color.blue())
    poll_msg = await ctx.send(embed=embed)

    for emoji in emoji_list[:len(–≤–∞—Ä–∏–∞–Ω—Ç—ã)]:
        await poll_msg.add_reaction(emoji)

    await asyncio.sleep(60)

    poll_msg = await ctx.channel.fetch_message(poll_msg.id)

    reactions = dict()
    for reaction in poll_msg.reactions:
        if reaction.emoji in emoji_list:
            reactions[reaction.emoji] = reaction.count

    winner_emoji = max(reactions, key=reactions.get)
    winner_index = emoji_list.index(winner_emoji)
    winner_option = –≤–∞—Ä–∏–∞–Ω—Ç—ã[winner_index]

    await ctx.send(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ! –ü–æ–±–µ–¥–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç {winner_option}.")


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É
@bot.slash_command()
async def joke(ctx):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://v2.jokeapi.dev/joke/Any") as response:
            json_response = await response.json()
            if json_response['type'] == 'single':
                await ctx.send(json_response['joke'])
            else:
                await ctx.send(f"{json_response['setup']}... {json_response['delivery']}")


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
@bot.slash_command()
async def fact(ctx):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://uselessfacts.jsph.pl/random.json?language=ru") as response:
            if response.status == 200:
                json_response = await response.json()
                r_fact = json_response['text']
                await ctx.send(r_fact)
            else:
                await ctx.send("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞
@bot.slash_command()
async def add(ctx, —á–∏—Å–ª–æ1: int, —á–∏—Å–ª–æ2: int):
    result = —á–∏—Å–ª–æ1 + —á–∏—Å–ª–æ2
    await ctx.send(f"{—á–∏—Å–ª–æ1} + {—á–∏—Å–ª–æ2} = {result}")


# –í—ã—á–∏—Ç–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ
@bot.slash_command()
async def subtract(ctx, —á–∏—Å–ª–æ1: int, —á–∏—Å–ª–æ2: int):
    result = —á–∏—Å–ª–æ1 - —á–∏—Å–ª–æ2
    await ctx.send(f"{—á–∏—Å–ª–æ1} - {—á–∏—Å–ª–æ2} = {result}")


# –£–º–Ω–æ–∂–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞
@bot.slash_command()
async def multiply(ctx, —á–∏—Å–ª–æ1: int, —á–∏—Å–ª–æ2: int):
    result = —á–∏—Å–ª–æ1 * —á–∏—Å–ª–æ2
    await ctx.send(f"{—á–∏—Å–ª–æ1} * {—á–∏—Å–ª–æ2} = {result}")


# –î–µ–ª–∏—Ç –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–∞ –≤—Ç–æ—Ä–æ–µ
@bot.slash_command()
async def divide(ctx, —á–∏—Å–ª–æ1: int, —á–∏—Å–ª–æ2: int):
    if —á–∏—Å–ª–æ2 == 0:
        await ctx.send("–ê–π, –∞–π. –î–µ–ª–∏—Ç—å –Ω–∞ 0 –Ω–µ–ª—å–∑—è!")
    else:
        result = —á–∏—Å–ª–æ1 / —á–∏—Å–ª–æ2
        await ctx.send(f"{—á–∏—Å–ª–æ1} / {—á–∏—Å–ª–æ2} = {result}")


# –í—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å —á–∏—Å–ª–∞
@bot.slash_command()
async def sqrt(ctx, —á–∏—Å–ª–æ: float):
    if —á–∏—Å–ª–æ < 0:
        await ctx.send("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    else:
        result = math.sqrt(—á–∏—Å–ª–æ)
        await ctx.send(f"–ö–æ—Ä–µ–Ω—å –∏–∑ —á–∏—Å–ª–∞ {—á–∏—Å–ª–æ} = {result}.")


# –û–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.slash_command()
async def reminder(ctx, –≤—Ä–µ–º—è: int, *, —Å–æ–æ–±—â–µ–Ω–∏–µ: str):
    if –≤—Ä–µ–º—è <= 0:
        await ctx.send("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö > 0.")
    else:
        await ctx.send(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∞—Å—Ç –æ —Å–µ–±–µ –∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ {–≤—Ä–µ–º—è} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(–≤—Ä–µ–º—è)
        await ctx.send(f"{ctx.author.mention}, –í–ê–®–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {—Å–æ–æ–±—â–µ–Ω–∏–µ}")


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
@bot.slash_command()
async def invite(ctx):
    invite_link = f"https://discord.com/oauth2/authorize?client_id={bot.user.id}&scope=bot"
    await ctx.send(f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {invite_link}")


# –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
@bot.command()
async def choose(ctx, *–≤–∞—Ä–∏–∞–Ω—Ç—ã):
    if len(–≤–∞—Ä–∏–∞–Ω—Ç—ã) < 2:
        await ctx.send("–ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
    else:
        selected = random.choice(–≤–∞—Ä–∏–∞–Ω—Ç—ã)
        await ctx.send(f"–Ø –≤—ã–±—Ä–∞–ª: {selected}")


# –û–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—Ç—Å—á–µ—Ç–∞
@bot.slash_command()
async def countdown(ctx, —Å–µ–∫—É–Ω–¥—ã: int):
    if —Å–µ–∫—É–Ω–¥—ã <= 0:
        await ctx.send("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.")
    else:
        for i in range(—Å–µ–∫—É–Ω–¥—ã, 0, -1):
            await ctx.send(i)
            await asyncio.sleep(1)
        await ctx.send("–û—Ç—Å—á–µ—Ç –æ–∫–æ–Ω—á–µ–Ω!")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
@bot.slash_command()
async def setstatus(ctx, *, —Å—Ç–∞—Ç—É—Å: str):
    if ctx.author.guild_permissions.manage_guild:
        await bot.change_presence(activity=disnake.Game(name=—Å—Ç–∞—Ç—É—Å))
        await ctx.send(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø–æ–º–µ–Ω—è–ª—Å—è –Ω–∞ '{—Å—Ç–∞—Ç—É—Å}'.")
    else:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–∏—á–∫–æ–≤
@bot.event
async def on_member_join(—É—á–∞—Å—Ç–Ω–∏–∫):
    guild = —É—á–∞—Å—Ç–Ω–∏–∫.guild
    welcome_role = "–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    welcome_channel = "–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"
    male_emoji = "‚ôÇÔ∏è"
    female_emoji = "‚ôÄÔ∏è"
    verified_role = "–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
    male_role = "‚ôÇÔ∏è"
    female_role = "‚ôÄÔ∏è"

    unverified_role = disnake.utils.get(guild.roles, name=welcome_role)

    verified_role = disnake.utils.get(guild.roles, name=verified_role)

    male_role = disnake.utils.get(guild.roles, name=male_role)

    female_role = disnake.utils.get(guild.roles, name=female_role)

    welcome_channel = disnake.utils.get(guild.text_channels, name=welcome_channel)
    if welcome_channel:
        await —É—á–∞—Å—Ç–Ω–∏–∫.add_roles(unverified_role)
        message = await welcome_channel.send(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {—É—á–∞—Å—Ç–Ω–∏–∫.mention}! –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –æ–¥–Ω–∏–º –∏–∑ —ç—Ç–∏—Ö —ç–º–æ–¥–∑–∏. "
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª, –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏: {male_emoji} –∏–ª–∏ {female_emoji}.")
        await message.add_reaction(male_emoji)
        await message.add_reaction(female_emoji)

        def check(reaction, user):
            return user == —É—á–∞—Å—Ç–Ω–∏–∫ and reaction.message.id == message.id \
                   and str(reaction.emoji) in [male_emoji, female_emoji]

        try:
            reaction, user = await bot.wait_for("reaction_add", timeout=300.0, check=check)
        except asyncio.TimeoutError:
            await welcome_channel.send(f"{—É—á–∞—Å—Ç–Ω–∏–∫.mention}, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            if str(reaction.emoji) == male_emoji:
                await —É—á–∞—Å—Ç–Ω–∏–∫.add_roles(male_role)
                gender = "–º—É–∂—Å–∫–æ–π"
            elif str(reaction.emoji) == female_emoji:
                await —É—á–∞—Å—Ç–Ω–∏–∫.add_roles(female_role)
                gender = "–∂–µ–Ω—Å–∫–∏–π"

            await —É—á–∞—Å—Ç–Ω–∏–∫.remove_roles(unverified_role)
            await —É—á–∞—Å—Ç–Ω–∏–∫.add_roles(verified_role)
            await welcome_channel.send(f"{—É—á–∞—Å—Ç–Ω–∏–∫.mention} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {gender}!")

            cursor.execute("INSERT INTO users (id, name, gender) VALUES (?, ?, ?)",
                           (—É—á–∞—Å—Ç–Ω–∏–∫.id, —É—á–∞—Å—Ç–Ω–∏–∫.name, gender))
            conn.commit()


@bot.event
async def on_disconnect():
    conn.close()


bot.run(TOKEN)
